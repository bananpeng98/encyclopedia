#+title: Henon map
#+roam_tags: dynamical systems henon map fractal chaos attractor

#+call: init()

#+begin_src jupyter-python :results silent :lib
import sympy as sm
import matplotlib.pyplot as plt
import numpy as np
import numba
from sympy import *
from pyorg.latex import *
#+end_src

* Henon map
#+begin_src jupyter-python
a, b = symbols('a b')
V = {
    a: 1.4,
    b: 0.3
}
LValues(V)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
a = 1.4\\
b = 0.3
\end{cases}\end{equation}
:END:

#+begin_src jupyter-python
n = symbols('n')
x, y = symbols('x y', cls=Function)
x_e = Eq(x(n+1), y(n) + 1 - a*x(n)**2)
y_e = Eq(y(n+1), b*x(n))
LCases(x_e, y_e)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
x{\left(n + 1 \right)} = - a x^{2}{\left(n \right)} + y{\left(n \right)} + 1\\
y{\left(n + 1 \right)} = b x{\left(n \right)}
\end{cases}\end{equation}
:END:

#+begin_src jupyter-python
x_ex = x_e.subs(V)
y_ex = y_e.subs(V)
LCases(x_ex, y_ex)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
x{\left(n + 1 \right)} = - 1.4 x^{2}{\left(n \right)} + y{\left(n \right)} + 1\\
y{\left(n + 1 \right)} = 0.3 x{\left(n \right)}
\end{cases}\end{equation}
:END:

#+begin_src jupyter-python
x_lambda = numba.njit(lambdify((x(n), y(n)), x_ex.rhs, 'numpy'))
y_lambda = numba.njit(lambdify((x(n), y(n)), y_ex.rhs, 'numpy'))
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results silent
@numba.njit()
def next_point(x, y):
    return x_lambda(x, y), y_lambda(x, y)
#+end_src

#+begin_src jupyter-python :results silent
@numba.njit()
def n_steps(n, xmin=-2, xmax=2, ymin=-0.5, ymax=0.5, transient=100, points=10):
    ps = []
    for y in np.linspace(ymin, ymax, points):
        for x in np.linspace(xmin, xmax, points):
            px, py = x, y
            for i in range(n):
                px, py = next_point(px, py)
                if i > transient and px < xmax and px > xmin and py < ymax and py > ymin:
                    ps.append([px, py])
    return np.array(ps)
#+end_src

#+begin_src jupyter-python
def plot_henon_map():
    points = n_steps(1000)
    plt.scatter(points[:, 0], points[:, 1], s=0.01)
    plt.xlim([-2, 2])
    plt.ylim([-0.5, 0.5])
#+end_src

#+RESULTS:


#+thumb:
#+begin_src jupyter-python :results output
plot_henon_map()
plt.title("HÃ©non map")
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/09b083c489976c6f88f4e37fe8ee82c53f94e859.png]]

** Fractal dimension
#+begin_src jupyter-python
@numba.njit()
def create_boxes(eps=0.01, xd=2, yd=1, rows=16, cols=16):
    minp = np.array([-1.28466378, -0.38539913])
    maxp = np.array([1.27297361, 0.38189208])

    N_boxes_xy = ((maxp-minp)/eps).astype(np.int32)+1
    boxes = np.zeros((N_boxes_xy[0], N_boxes_xy[1]), dtype=np.uint64)

    for y in np.linspace(minp[1], maxp[1], rows):
        for x in np.linspace(minp[0], maxp[0], cols):
            px, py = x, y
            for i in range(400000):
                px, py = next_point(px, py)
                if i < 100:
                    continue
                if abs(px) < xd and abs(py) < yd:
                    mx = int((px-minp[0])*(1/eps))
                    my = int((py-minp[1])*(1/eps))
                    boxes[mx, my] += 1
                else:
                    break
    return boxes
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports none
boxes = create_boxes()
boxes.sum()
#+end_src

#+RESULTS:
: 92776800

#+begin_src jupyter-python
def I(eps, q):
    boxes = create_boxes(eps=eps)
    p = boxes / boxes.sum()
    p = p[p>0]
    if q != 1:
        p = p**q
    else:
        p = p*np.log(1/p)
    return p.sum()
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports none :eval never-export
from scipy.stats import linregress
eps = np.linspace(1e-4, 2e-2, 10)
q = 0
res = []
for q in [0, 1, 2]:
    ys = []
    for e in eps:
        if q != 1:
            ys.append(np.log(I(e, q))/(1-q))
        else:
            ys.append(I(e, q))
    xs = np.log(1/eps)
    slope = linregress(xs, ys).slope
    res.append((q, slope))
res
#+end_src

#+RESULTS:
| 0 | 1.2574279669121744 |
| 1 | 1.2463104446564135 |
| 2 |  1.212934310880132 |

#+begin_src jupyter-python
def plot_boxes():
    n = 3
    plt.figure(figsize=(4, 4))
    for i in range(3):
        eps = 1/(2**(i+5))
        boxes = create_boxes(eps=eps)
        plt.subplot(1, 3, i+1)
        plt.title(f"$\\epsilon={eps:.2f}$")
        plt.imshow(boxes)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results file :exports results
plot_boxes()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/96d28afaf70a8a3929796b519d599c043ebf69c8.png]]


#+begin_src jupyter-python :exports none
If = sm.symbols('I', cls=sm.Function)
LEq(If(0.01, 2), I(0.01, 2))
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}I{\left(0.01,2 \right)} = 0.00122458552663913\end{equation}
:END:

#+begin_src jupyter-python
def D(eps, q):
    return (np.log(I(eps, q))/np.log(1/eps))/(1-q)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results output :eval never-export
D = symbols('D', cls=Function)
eps = np.linspace(1e-4, 2e-2, 10)
plt.figure(figsize=(4, 4))
plt.xlabel("$ln(1/\\epsilon)$")
for i, q in enumerate([0, 1, 2]):
    ys = []
    for e in eps:
        if q != 1:
            ys.append(np.log(I(e, q))/(1-q))
        else:
            ys.append(I(e, q))
    xs = np.log(1/eps)
    slope = linregress(xs, ys).slope
    plt.plot(xs, ys, label=f"q={q}, slope={slope:.4f}")
plt.legend()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/db46417862d657bb2900d7ad3478efeac55ccfe3.png]]

#+begin_src jupyter-python :results output :eval never-export
D = []
eps = np.linspace(1e-4, 2e-2, 2)
plt.figure(figsize=(4, 4))
qs = np.linspace(0, 4, 10)
for q in qs:
    ys = []
    for e in eps:
        if q != 1:
            ys.append(np.log(I(e, q))/(1-q))
        else:
            ys.append(I(e, q))
    xs = np.log(1/eps)
    slope = linregress(xs, ys).slope
    D.append(slope)
plt.xlabel("$q$")
plt.ylabel("$D_q$")
plt.plot(qs, D)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a8754bfefc538587e77e93b07e16fe363f6fd2c0.png]]

** Lyapunov exponents

#+begin_src jupyter-python
J = Matrix([x_ex.rhs, y_ex.rhs]).jacobian([x(n), y(n)])
J
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\left[\begin{matrix}- 2.8 x{\left(n \right)} & 1\\0.3 & 0\end{matrix}\right]\end{equation}
:END:

#+begin_src jupyter-python
J_numba = numba.njit(lambdify((x(n), y(n)), J))
#+end_src

#+RESULTS:

#+begin_src jupyter-python
def stability():
    skip = 100
    Qi = np.eye(2)
    li = np.zeros([2])
    l = 0
    i = 0
    N = 0
    t = 0
    hist = []
    times = []
    Mi = np.eye(2)
    np.set_printoptions(suppress=True)
    xt = 0.1
    yt = 0.1
    while t < 100000:
        xt, yt = next_point(xt, yt)
        t += 1
        if i > skip:
            Mi = J_numba(xt, yt)
            Qi, Ri = np.linalg.qr(np.matmul(Mi,Qi), mode='complete')
            li += np.log(np.abs(np.diagonal(Ri)))
            N += 1
            l = (1.0/N)*li
            hist.append(l)
            times.append(t)
            if i % 1000 == 0:
                print("{}, t={}, {}   ".format(i, t, l), end='\r')
        i += 1

    print("{}, t={}, {}   ".format(i, t, l))
    return np.array(times), np.array(hist)
#+end_src

#+RESULTS:

#+begin_src jupyter-python :results output :eval never-export
def plot_hist(t, hist):
    lines = plt.plot(t, hist)
    plt.xscale('log')
    plt.legend(lines, ['$\\lambda_1$', '$\\lambda_2$'])
times, hist = stability()
plot_hist(times, hist)
hist[-1]
#+end_src

#+RESULTS:
:RESULTS:
: 100000, t=100000, [ 0.41949319 -1.623466  ]
[[file:./.ob-jupyter/68ba0be8ce171f1bb98a878c9bac093c3c758574.png]]
:END:
