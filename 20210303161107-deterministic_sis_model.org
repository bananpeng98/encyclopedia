#+title: Deterministic SIS model
#+theme: light
#+roam_tags: sis model deterministic model population dynamic system

* Setup :noexport:
#+call: init()

#+call: init-plot-style()

* Lib :noexport:
:PROPERTIES:
:header-args: :tangle yes :results silent
:END:

#+begin_src jupyter-python
from sympy import *
from pyorg.latex import *
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from cycler import cycler
import numpy as np
import matplotlib
#+end_src

* Deterministic SIS model
#+begin_src jupyter-python
S, I = symbols('S I', integer=True, positive=True, cls=Function)
S0, I0, N, Sstar, Istar = symbols('S_0 I_0 N S^* I^*', integer=True, positive=True)
alpha, beta, t, r0 = symbols('alpha beta t r_0', real=True, positive=True)

deps = Matrix([S(t), I(t)])
model_lhs = Matrix([S(t).diff(t), I(t).diff(t)])
model_rhs = Matrix([
    -(alpha/(S(t)+I(t)))*S(t)*I(t) + beta*I(t),
    (alpha/(S(t)+I(t)))*S(t)*I(t) - beta*I(t),
])

LMatEq(model_lhs, model_rhs)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{array}{l}
\frac{d}{d t} S{\left(t \right)} = - \frac{\alpha I{\left(t \right)} S{\left(t \right)}}{I{\left(t \right)} + S{\left(t \right)}} + \beta I{\left(t \right)}\\
\frac{d}{d t} I{\left(t \right)} = \frac{\alpha I{\left(t \right)} S{\left(t \right)}}{I{\left(t \right)} + S{\left(t \right)}} - \beta I{\left(t \right)}
\end{array}\end{equation}
:END:

#+begin_src jupyter-python :exports none
model_lam = lambdify((S(t), I(t), alpha, beta), model_rhs, 'numpy')

def model_ode(t, y, alpha, beta):
    return model_lam(*y, alpha, beta)

model_lam(2, 3, 1, 2)
#+end_src

#+RESULTS:
: array([[ 4.8],
:        [-4.8]])

#+begin_src jupyter-python :results output :noweb yes
alphas_n = np.linspace(0, 2, 20)
betas_n = np.linspace(0, 1, 40)
alpha_n = 0.5
beta_n = 0.1
plt.ylim([0, 100])
sol = solve_ivp(model_ode, [0, 100], [90, 10], rtol=1e-5, args=[alpha_n, beta_n], vectorized=True)
y = sol.y.T
plt.plot(sol.t, y[:, 0], color=<<color("green")>>)
plt.plot(sol.t, y[:, 1], color=<<color("red")>>)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/34484fd3973adaebf3b75d753b227596eb76a315.png]]

#+begin_src jupyter-python
SI_consteq = Eq(S(t)+I(t),N)
steady_eq_sys = model_lhs.applyfunc(lambda e: Eq(e, 0))
LImply(LCases(*steady_eq_sys), Eq(S(t).diff(t)+I(t).diff(t),0), SI_consteq)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
\frac{d}{d t} S{\left(t \right)} = 0\\
\frac{d}{d t} I{\left(t \right)} = 0
\end{cases} \Rightarrow \frac{d}{d t} I{\left(t \right)} + \frac{d}{d t} S{\left(t \right)} = 0 \Rightarrow I{\left(t \right)} + S{\left(t \right)} = N\end{equation}
:END:

#+begin_src jupyter-python
steady_states_subs = solve(list(model_rhs)+[SI_consteq], [S(t), I(t)], dict=True)[1]
steady_states = {
    Sstar: steady_states_subs[S(t)],
    Istar: steady_states_subs[I(t)],
}
# steady_states = {
#     Sstar: steady_states[S(t)].subs(beta/alpha, 1/r0),
#     Istar: steady_states[I(t)].apart(alpha).subs(beta/alpha, 1/r0).collect(N),
# }
LValues(steady_states)
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}\begin{cases}
S^{*} = \frac{N \beta}{\alpha}\\
I^{*} = \frac{N \left(\alpha - \beta\right)}{\alpha}
\end{cases}\end{equation}
:END:

#+name: src:fig:param_infect_steady
#+begin_src jupyter-python :results output
S0_n = 90
I0_n = 10
N_n = S0_n+I0_n
n = 64
T_n = 200
suscept_limits = np.zeros([n, n])+N_n
infect_limits = np.zeros([n, n])
alpha_max = 2.0
beta_max = 2.0
alphas_n = np.linspace(0.001, alpha_max, n)
betas_n = np.linspace(0.001, beta_max, n)

Istar_lam = lambdify((N, alpha, beta), steady_states[Istar])
for i, alpha_n in enumerate(alphas_n):
    for j, beta_n in enumerate(betas_n):
        # if alpha_n > beta_n:
            # suscept_limits[i, j] = N_n*beta_n/alpha_n
        infect_limits[i, j] = Istar_lam(N_n, alpha_n, beta_n)

fig, ax1 = plt.subplots(1, 1, figsize=(8, 4))
im = ax1.imshow(infect_limits, origin='lower', vmin=0, vmax=N_n)
ax1.set_title(latex(Istar, mode='inline'))
ax1.set_xticks([0, n//2, n])
ax1.set_xticklabels([0, alpha_max/2, alpha_max])
ax1.set_yticks([0, n//2, n])
ax1.set_yticklabels([0, beta_max/2, beta_max])
ax1.set_xlabel("$\\alpha$")
ax1.set_ylabel("$\\beta$")
fig.colorbar(im, ax=ax1)
#+end_src

#+caption: Steady states for the infectives evaluated for every combination of $\alpha$ and $\beta$ in the interval $(0, 2]$. The plot shows that $I(\infty)>0$ when $\alpha>\beta$.
#+label: fig:param_infect_steady
#+RESULTS: src:fig:param_infect_steady
[[file:./.ob-jupyter/3991937bb12ec5c501b3440912f84c4888a2e5b9.png]]

#+begin_src jupyter-python
J = Matrix(model_rhs).jacobian([S(t), I(t)])
trace(J).subs(steady_states_subs).simplify()
#+end_src

#+RESULTS:
:RESULTS:
\begin{equation}- \alpha + \beta\end{equation}
:END:
