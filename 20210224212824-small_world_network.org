#+title: Small world network
#+roam_tags: graph theory small world network

* Setup :noexport:
#+call: init()
#+call: init-plot-style()

* Lib :noexport:
:PROPERTIES:
:header-args: :tangle encyclopedia/small_world_network.py :results silent
:END:

#+begin_src jupyter-python
import numpy as np
import networkx as nx
#+end_src

#+begin_src jupyter-python
def small_world(n, c, p):
    A = np.zeros([n, n])
    for i in range(n):
        for j in range(c//2):
            A[i, (i+1+j)%n] = 1

    replace_count = int(((np.random.random([n, n])<p)*A).sum())
    from_nodes = np.random.randint(n, size=replace_count)
    to_nodes = np.random.randint(n, size=replace_count)
    A[from_nodes, to_nodes] = 1

    np.fill_diagonal(A, 0)
    return nx.from_numpy_matrix(A)
#+end_src

* Small world network
The small world network is a graph that has a small [[file:20210228010349-average_path_length.org][average path length]] and a
small [[file:20210224212955-clustering_coefficient.org][clustering coefficient]].

#+begin_src jupyter-python :results file :noweb yes
n = 64
c1 = 16
p1 = 0
c2 = 16
p2 = 0.5

G_before = small_world(n, c1, p1)
G_after = small_world(n, c2, p2)

plt.figure(figsize=(4*2, 4))

plt.subplot(1, 2, 1)
pos = nx.circular_layout(G_before)
draw_graph(G_before, pos)
plt.title("Before")
plt.gca().set_aspect(1)
plt.subplot(1, 2, 2)
pos = nx.circular_layout(G_after)
draw_graph(G_after, pos)
plt.title("After")
plt.suptitle(f"$n={n}, c={c1}, p={p2}$")
plt.gca().set_aspect(1)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8b8b03fa3f44f605d6001a937b05c2402555519d.png]]

#+thumb:
#+begin_src jupyter-python :results output :noweb yes :exports none
n = 64
c1 = 16
p1 = 0
c2 = 16
p2 = 0.5

G = small_world(n, c2, p2)

plt.figure(figsize=(4, 4))

pos = nx.circular_layout(G_after)
draw_graph(G_after, pos)
plt.gca().set_aspect(1)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5bec7b3712202837b3c9451d5a49b9aeea8b1fff.png]]
